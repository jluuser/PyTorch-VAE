import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

from mpl_toolkits.mplot3d import Axes3D  # Needed for 3D projection
###Attention: This file is used for the npy files generated by the reconstruct code or the inference code, and the xyz has been normalized.
# Input directory containing .npy files (inference output)
input_dir = "/public/home/zhangyangroup/chengshiz/keyuan.zhou/PyTorch-VAE/generated_curves/"
# Output directory for saving visualizations
output_dir = os.path.join(input_dir, "visualizations")
os.makedirs(output_dir, exist_ok=True)

# Mapping from one-hot index to label and color
INDEX_TO_SS = {0: 'h', 1: 's', 2: 'l'}
COLOR_MAP = {'h': 'red', 's': 'green', 'l': 'blue'}

# List all .npy files in the directory
npy_files = sorted([f for f in os.listdir(input_dir) if f.endswith(".npy")])

print(f"Found {len(npy_files)} .npy files to visualize.")

for fname in npy_files:
    file_path = os.path.join(input_dir, fname)
    curve = np.load(file_path)  # shape: [L, 6]

    xyz = curve[:, :3]                  # already de-normalized
    ss_onehot = curve[:, 3:]           # one-hot encoded

    ss_index = np.argmax(ss_onehot, axis=-1)              # [L]
    ss_labels = [INDEX_TO_SS[i] for i in ss_index]        # ['h', 's', 'l']
    ss_colors = [COLOR_MAP[label] for label in ss_labels] # ['red', 'blue', ...]

    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection='3d')

    # Plot line segments with structure-specific color
    for i in range(len(xyz) - 1):
        ax.plot(xyz[i:i+2, 0], xyz[i:i+2, 1], xyz[i:i+2, 2],
                color=ss_colors[i], linewidth=2)

    # Plot points
    ax.scatter(xyz[:, 0], xyz[:, 1], xyz[:, 2],
               c=ss_colors, s=36, alpha=0.9)

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title(f"Curve: {fname}")

    # Add legend
    legend_elements = [
        Line2D([0], [0], color='red', lw=2, label='Helix (h)'),
        Line2D([0], [0], color='green', lw=2, label='Sheet (s)'),
        Line2D([0], [0], color='blue', lw=2, label='Loop (l)')
    ]
    ax.legend(handles=legend_elements)

    plt.tight_layout()

    out_name = os.path.splitext(fname)[0] + ".png"
    out_path = os.path.join(output_dir, out_name)
    plt.savefig(out_path, dpi=300)
    plt.close(fig)

    print(f"Saved: {out_path}")
