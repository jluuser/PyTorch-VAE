import numpy as np
import matplotlib.pyplot as plt
import os
from matplotlib.lines import Line2D
#Attention: This file is used for the npy files generated by the training code(sample), and the xyz has not been normalized.
# De-normalization parameters
mean = np.array([59.75617548672732, 57.48255340071842, 67.46183179563933])
std = np.array([114.53544376107905, 120.74113448738537, 118.6619735740254])

# Path to the npy file and the output image directory
npy_path = "/public/home/zhangyangroup/chengshiz/keyuan.zhou/PyTorch-VAE/samples/sample_epoch_11_0.npy"
output_dir = "/public/home/zhangyangroup/chengshiz/keyuan.zhou/PyTorch-VAE/generated_curve_img/"

# Load the single curve data
curve = np.load(npy_path)  # shape: (L, 6)

# Split into coordinates and secondary structure (one-hot)
xyz_norm = curve[:, :3]
ss_onehot = curve[:, 3:]

# De-normalize to real coordinates
xyz_real = xyz_norm 

# Index to label mapping (matches training: h=0, s=1, l=2)
INDEX_TO_SS = {0: 'h', 1: 's', 2: 'l'}
COLOR_MAP = {'h': 'red', 's': 'green', 'l': 'blue'}

ss_index = np.argmax(ss_onehot, axis=-1)            # shape: [L]
ss_labels = [INDEX_TO_SS[i] for i in ss_index]      # List of 'h', 's', 'l'
ss_colors = [COLOR_MAP[ss] for ss in ss_labels]     # List of 'red', etc.

# Plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

for i in range(len(xyz_real) - 1):
    ax.plot(xyz_real[i:i+2, 0], xyz_real[i:i+2, 1], xyz_real[i:i+2, 2],
            color=ss_colors[i], linewidth=2)

ax.scatter(xyz_real[:, 0], xyz_real[:, 1], xyz_real[:, 2],
           c=ss_colors, s=36, alpha=0.9)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title("Generated Curve Visualization")

# Custom legend
legend_elements = [
    Line2D([0], [0], color='red', lw=2, label='Helix (h)'),
    Line2D([0], [0], color='green', lw=2, label='Sheet (s)'),
    Line2D([0], [0], color='blue', lw=2, label='Loop (l)')
]
ax.legend(handles=legend_elements)

plt.tight_layout()

# Ensure output directory exists
os.makedirs(output_dir, exist_ok=True)
output_path = os.path.join(output_dir, "generated_curve_11_0813.png")
plt.savefig(output_path, dpi=300)
plt.close(fig)

print(f"Image saved to {output_path}")
